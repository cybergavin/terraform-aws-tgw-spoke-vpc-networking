name: Auto Tagging for module versioning

on:
  push:
    branches:
      - develop  # Triggers pre-release tag on commits to develop
      - main     # Triggers stable-release tag after merge to main

jobs:
  pre-release-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: |
          git fetch --tags  # Ensure that all tags are fetched

      - name: Set Git user for tagging
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get latest stable tag
        id: version
        run: |
          # Fetch the latest stable version tag
          latest_stable_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          if [ -z "$latest_stable_tag" ]; then
            latest_stable_tag="v0.0.0"
          fi
          echo "Latest stable tag: $latest_stable_tag"
                    
          # Extract major, minor, patch from last tag
          version_base=$(echo $latest_stable_tag | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1.\2.\3/')
          echo "Base version: $version_base"
          
          # Count the number of betas by finding all existing tags that start with the version base
          beta_count=$(git tag -l "v${version_base}-beta*" | wc -l)
          next_beta=$((beta_count + 1))
          
          # Construct the new beta version
          new_version="v${version_base}-beta.${next_beta}"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create pre-release tag
        run: |
          git tag -a $new_version -m "Pre-release version $new_version"
          git push origin $new_version

  stable-release-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only runs on main branch (after PR merge)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: |
          git fetch --tags  # Ensure that all tags are fetched

      - name: Set Git user for tagging
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get the merge commit hash
        id: get_merge_commit_hash
        run: |
          # Get the latest merge commit hash (latest commit on the main branch)
          commit_hash=$(git log -1 --pretty=%H)
          echo "Merge commit hash: $commit_hash"
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Get PR title using GitHub CLI
        id: get_pr_title
        run: |
          # Set the GH_TOKEN for authentication
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          # Get the PR number from the commit message (e.g., "Merge pull request #5 from develop")
          pr_number=$(git log -1 --pretty=%s | grep -oP 'Merge pull request #\K\d+')
          echo "PR Number: $pr_number"

          # Fetch the PR title using the GitHub CLI
          pr_title=$(gh pr view $pr_number --json title -q ".title")
          echo "PR Title: $pr_title"
          echo "pr_title=$pr_title" >> $GITHUB_ENV

      - name: Determine version from PR title
        id: version
        run: |
          # Fetch the latest stable version tag
          latest_stable_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          if [ -z "$latest_stable_tag" ]; then
            latest_stable_tag="v0.0.0"
          fi
          echo "Latest stable tag: $latest_stable_tag"
          
          # Extract major, minor, patch from the last stable version
          IFS='.' read -r major minor patch <<< "$(echo "$latest_stable_tag" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)/\1.\2.\3/')"
          
          # Determine the version increment based on the PR title
          if [[ "$pr_title" =~ ^\(release\) ]]; then
            # For releases, increment major or minor (customize as needed)
            version_tag="v$((major + 1)).0.0"  # Example: major bump
          elif [[ "$pr_title" =~ ^\(feature\) ]]; then
            # For features, increment minor version
            version_tag="v${major}.$((minor + 1)).0"
          elif [[ "$pr_title" =~ ^\(bug\) ]]; then
            # For bugs, increment patch version
            version_tag="v${major}.${minor}.$((patch + 1))"
          else
            # Default version if no recognized prefix
            version_tag="v${major}.${minor}.$((patch + 1))"  # Increment patch by default
          fi
          
          echo "New version tag: $version_tag"
          echo "version_tag=$version_tag" >> $GITHUB_ENV

      - name: Create stable release tag
        run: |
          git tag -a $version_tag -m "Release version $version_tag"
          git push origin $version_tag